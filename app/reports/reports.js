'use strict';

angular.module('reportsView', ['ngRoute'])

.controller('listController', ["$scope", "$http", function($scope, $http) {
  $http.get('http://198.199.106.220/reports/')
    .then(function(data) {
      console.log(data);
      $scope.list = data;
    })
}])

.controller('mapController', ["$scope", function($scope) {

  $scope.map;
  require([
    "esri/map", "esri/layers/FeatureLayer",
    "esri/tasks/query", "esri/geometry/Circle",
    "esri/graphic", "esri/InfoTemplate", "esri/symbols/SimpleMarkerSymbol",
    "esri/symbols/SimpleLineSymbol", "esri/symbols/SimpleFillSymbol", "esri/renderers/SimpleRenderer",
    "esri/config", "esri/Color", "dojo/dom", "dojo/domReady!"
  ], function(
    Map, FeatureLayer,
    Query, Circle,
    Graphic, InfoTemplate, SimpleMarkerSymbol,
    SimpleLineSymbol, SimpleFillSymbol, SimpleRenderer,
    esriConfig, Color, dom
  ) {
    // use a proxy page if a URL generated by this page is greater than 2000 characters
    //
    // this should not be needed as nearly all query & select functions are performed on the client
    esriConfig.defaults.io.proxyUrl = "/proxy/";

    $scope.map = new Map("mapDiv", {
      basemap: "topo",
      center: [-95.249, 38.954],
      zoom: 5,
      slider: false
    });

    //add the census block points in on demand mode. Note that an info template has been defined so when
    //selected features are clicked a popup window will appear displaying the content defined in the info template.
    var featureLayer = new FeatureLayer("http://services5.arcgis.com/KYP7I6rUfwT2lRav/arcgis/rest/services/Environmental_Issues/FeatureServer/0",
                                        {mode: FeatureLayer.MODE_SELECTION,
                                        outFields: ["Category","title","description"]});

    // selection symbol used to draw the selected census block points within the buffer polygon
    var symbol = new SimpleMarkerSymbol(
      SimpleMarkerSymbol.STYLE_CIRCLE,
      12,
      new SimpleLineSymbol(
        SimpleLineSymbol.STYLE_NULL,
        new Color([247, 34, 101, 0.9]),
        1
      ),
      new Color([207, 34, 171, 0.5])
    );
   // featureLayer.setSelectionSymbol(symbol);

    //make unselected features invisible
    var nullSymbol = new SimpleMarkerSymbol().setSize(0);
    //featureLayer.setRenderer(new SimpleRenderer(nullSymbol));

    $scope.map.addLayer(featureLayer);

    var circleSymb = new SimpleFillSymbol(
      SimpleFillSymbol.STYLE_NULL,
      new SimpleLineSymbol(
        SimpleLineSymbol.STYLE_SHORTDASHDOTDOT,
        new Color([105, 105, 105]),
        2
      ), new Color([255, 255, 0, 0.25])
    );
    var circle;

    //when the map is clicked create a buffer around the click point of the specified distance.
    $scope.map.on("click", function(evt){
      circle = new Circle({
        center: evt.mapPoint,
        geodesic: true,
        radius: 1000,
        radiusUnit: "esriMiles"
      });
      // GET COORDIANTES HERE
      // x evt.mapPoint.x
      // y evt.mapPoint.y
      $scope.map.graphics.clear();
      $scope.map.infoWindow.hide();
      var graphic = new Graphic(circle, circleSymb);
      $scope.map.graphics.add(graphic);

      var query = new Query();
      query.geometry = circle.getExtent();
      //use a fast bounding box query. will only go to the server if bounding box is outside of the visible map
      featureLayer.queryFeatures(query, selectInBuffer);
    });

    function selectInBuffer(response){
      var feature;
      var features = response.features;
      var inBuffer = [];
      //filter out features that are not actually in buffer, since we got all points in the buffer's bounding box
      for (var i = 0; i < features.length; i++) {
        feature = features[i];
        if(circle.contains(feature.geometry)){
          inBuffer.push(feature.attributes[featureLayer.objectIdField]);
        }
      }
      var query = new Query();
      query.objectIds = inBuffer;
      //use a fast objectIds selection query (should not need to go to the server)
      featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW, function(results){

      // RESULTS HERE
        var totalPopulation = sumPopulation(results);
        $scope.$apply(function() {
          $scope.results = results;
          console.log($scope.results);
        });
        var r = "";
        r = "<b>The total Census Block population within the buffer is <i>" + totalPopulation + "</i>.</b>";
      });
    }

    function sumPopulation(features) {
      var popTotal = 0;
      for (var x = 0; x < features.length; x++) {
        popTotal = popTotal + features[x].attributes["POP2000"];
      }
      return popTotal;
    }
  }
);

$scope.countIssues = function(data) {
  var issueCount = {};
  var arr = [];

  data.forEach(function(issue) {
    var checkIssue = issue.attributes.Category
    if(checkIssue in issueCount) {
      issueCount[checkIssue] += 1;
    } else {
      issueCount[checkIssue] = 1;
    }
  });
  //bubbleSort(issueCount);

  for (var category in issueCount) {
    arr.push([category, issueCount[category]]);
  }

  arr.sort(function(a, b) {
    return b[1] - a[1];
  });

  console.log(arr);


  /*
  function bubbleSort(data) {
    var keys = Object.keys(data);

    console.log("keys: " + keys);

    function swap(a, b) {
      var temp = a;
      a = b;
      b = temp;
    }

    console.log(data['Damage']);
    for (var i = 0; i < keys.length - 1; i++) {
      for (var j = 0; j < keys.length - 1; i++) {
        if (data[keys[i]] > data[keys[j]]) {
          // swap here
          console.log('swap happens!');
          swap(keys[i], keys[j])
        }
      }
    }

    console.log('after fors: ' + keys);
  }
    */


  return arr;
};


}])


/*
.controller('formController', ["$scope", function($scope) {
  require([
    "esri/map", "esri/layers/FeatureLayer",
    "esri/tasks/query", "esri/geometry/Circle",
    "esri/graphic", "esri/InfoTemplate", "esri/symbols/SimpleMarkerSymbol",
    "esri/symbols/SimpleLineSymbol", "esri/symbols/SimpleFillSymbol", "esri/renderers/SimpleRenderer",
    "esri/config", "esri/Color", "dojo/dom-attr", "dojo/dom", "dojo/domReady!"
  ], function(
    Map, FeatureLayer,
    Query, Circle,
    Graphic, InfoTemplate, SimpleMarkerSymbol,
    SimpleLineSymbol, SimpleFillSymbol, SimpleRenderer,
    esriConfig, Color, domAttr, dom
  ) {
    esriConfig.defaults.io.proxyUrl = "/proxy/";
    map = new Map("map", {
      basemap: "topo", //For full list of pre-defined basemaps, navigate to http://arcg.is/1JVo6Wd
      center: [-122.45, 37.75], // longitude, latitude
      zoom: 13
    });
    var circleSymb = new SimpleFillSymbol(
      SimpleFillSymbol.STYLE_NULL,
      new SimpleLineSymbol(
        SimpleLineSymbol.STYLE_SHORTDASHDOTDOT,
        new Color([105, 105, 105]),
        2
      ), new Color([255, 255, 0, 0.25])
    );
    var circle;
    map.on("click", function(evt) {
      // GET LAT LONG HERE
      console.log("x: " + evt.mapPoint.x + " y: " + evt.mapPoint.y);
      circle = new Circle({
        center: evt.mapPoint,
        geodesic: true,
        radius: 0.1,
        radiusUnit: "esriMiles"
      });
      map.graphics.clear();
      map.infoWindow.hide();
      var graphic = new Graphic(circle, circleSymb);
      map.graphics.add(graphic);
      domAttr.set("latitude", "value", evt.mapPoint.y);
      console.log(domAttr.get("latitude", "value"));
      domAttr.set("longitude", "value", evt.mapPoint.x);
      console.log(domAttr.get("longitude", "value"));
    })
  });

}]);
*/
